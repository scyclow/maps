/*

Zones
Abstractions of Nothing
Maps of Hyperreality
Fake Hyperrealities
Fake Maps
Fake Abstractions
Maps Without Territories
Simulacras
Districts
Digital Renderings of Hand Drawn Maps
Metaverse
hyperreality
Hand Drawn Maps With Coffee Stain
Nonexistant Maps
Simulations of Territory
Territorial Simulations
Cartographic Simulations
Artifacts
Digital artifacts
Simulated Cartographies
The Treachery of Cartography
The Treachery of Maps
Maps of Distress
Maps of Nothing
Maps of a Decaying Territory
Facsimiles of Maps
Facsimiles
Artificial Maps
Reified Maps
Imagined Maps
Fucked up maps

Reific maps

Heat Maps

Untitled Maps Project
Leaky Abstractions



As the map frays




A map is defined as a representation, usually on a flat surface, of a whole or part of an area.
The job of a map is to describe spatial relationships of specific features that the map aims to represent.
There are many different types of maps that attempt to represent specific things.
Maps can display political boundaries, population, physical features, natural resources, roads, climates, elevation (topography), and economic activities.




And while there have definitely been plenty of other amaxing map-based generative art projects, this one strikes a slightly different tone.

It focuses on the artificiality of map and its fallibility.
To put things in Baudrillardian terms: it highlights the fact that the map is a representation of the territory, and not the territory itself.
And as the map frays, it's unclear whether it represents the decay of the map or of the territory itself.




Where did these maps come from, and what do they represent?
Are they variations of never-built, centrally planned South American Cities?

Are they hand drawn? Printed from a digital artifact?


And what do the markings mean? Are the geographical features, perhaps a reference to physical terrirory on top of which the city was built?
Do they represent some sort of meteorological phenomena? Or maybe they represent some sort of social or ideological __, projected into physical space?
Or maybe they don't represent anything at all. Maybe they they're just the result of the decay of the map itself.


"Today abstraction is no longer that of the map, the double, the mirror, or the concept. Simulation is no longer that of a territory, a referential being, or a substance. It is generated by models of a real without origin or reality: a hyperreal. The territory no longer precedes the map, nor does it survive it. It is nevertheless the map that precedes the territory--procession of simulacrs--that engenders the territory, snf if one must return to the fable, today it is the territory whose shreds slowly rot across the extent of the map. It is the real, and not the map, whose vestiges persist here and there in the deserts that are no longer those of the Empirs, but ours. The desert fo the real."






i guess the idea is that it's unclear where the map starts and the territory ends.
the map is a territory in itself. and when it comes to street layouts, the territory is actually a form of map.



do the blotches represent a mapping of the territory, or the territory of the map?
is it a representation of the thing th emap is of? or is it a decay of the actual map itself?



maps are representations of reality. highlight the fact that this is a representation.
In the Borges story, the maps become so larger that they effectively contain no abstraction.


each map seems to tell a story, but they're stories of things that have never existed.

all of the zones/clouds/splotches can represent numerous things.
they can represent a social abstraction - an ideology, a community, a district
they can represent a natural system parallel to the city grid - topology, weather
or, they can represent the degredation of the map itself


one thing that this makes me think of is how there are all of these immaterial zones and structures
that we try to map onto physical space and represent with abstractions. it could be walking into a neighborhood
and crossing through the in-between area of that neighborhood. what do the blotches represent in the context of the map?
or, do they represent nothing? are they a random coffee stain



i guess the idea is that maps are a representation of reality, and that representation can be constructed in multiple different ways




In 1986, a team of estonian neuroscientists conducted an experiment in which participants
were given a description of a non existent terain. Participants were then measured by an fMRI
and were asked to describe, in as much detail as possible, the most likely infrastructural network
to arise from this terrain.

There are many other details missing from this experiment, chief of which is the initial hypothesis
of the experiment


In all, 961 trials have been confirmed, although many speculate that the methodology of the tests may have
been inconsistent from trial to trial. Additionally, it's clear that the storage procedures differ drastically
from output to output, with some having degraded substantially.



*/



/*
2-2 notes

  - higher minimum noise divisor (or, make layer1 threshold higher when low noise divisor)
  - layer 2 neon on neon/dark doesn't look great when only two layers


2-3 notes
  - for hard curves, and zoomed out, noise divisor should be a lot higher
  - for zoomed in, main avenue should start within the frame, be straighter



2-6 notes
  - it seems like the avg elevation thing isn't quite working any more? ex 142, 125 (it works sometimes, but not sure i like it on the whole)
  - for papers, should make street colors in reverse order of luminesence
  - base bright should also have a version where streets have some color
  - maybe dark/neon should have base color streets as well


2-8 notes
  - should have more that have no black bg color schemes
  - fewer with choppy clouds
    - maybe when it does pop up, either have really low threshold or higher threshold
    - or, at very least have a higher noise divisor
    - 92, 112 are good ones
  - rare bg: each stroke is a random hue


2-12 notes
  - do a deep dive on 2-layer outputs. modify rules to make those look better
  - do a deep dive on zoomed out pieces. make high contrast bg strokes look better
  - adjust high density zoomed out outputs
  - animation intro?
  - name?




  2 layers
    - no paper/faded/burnt
    - no gradient



2-11 notes
  - should make the primary/secondary aves thinner, espescially for hig density
  - with turbulence, streets look too dotty
  - maybe don't have high graininess on neon
  - play with noise harmonics



2-13 notes
  - more 20deg color changes
  - should have an initial hue change, and the subsequent hue change
  - should also play around with changing darkness, saturation
  - higher noise divisor min with dark bgs
  - more straight streets

2-14 notes
  - nix the symmetry
  - elevation gradient might need ot be more subtle, espescially on paper
    - maybe try saturation/brightness modifications again


2-16 notes
  - high density zoomed out looks weird
  - maybe increase kinked streets



*/


let SIZE, SCALE, L, R, T, B, W, H

function keyPressed() {
  if (keyCode === 83) {
    saveCanvas(__canvas, 'maps-' + Date.now(), 'png');
  }
}


let NOISE_DIVISOR, TURBULENCE, IGNORE_STREET_CAP, STREET_TURBULENCE, HARD_CURVES, DENSITY,
    COLOR_RULE, STRAIGHT_STREETS, SECONDARY_ANGLE_ADJ, DOUBLE_STREETS, KINKED_STREET_FACTOR
let LAYERS = []

const NOISE_OFFSET = 100000

function setup() {
  // W_H_RATIO = 1.25
  // const windowRatio = window.innerWidth/window.innerHeight
  // SIZE = min(window.innerWidth, window.innerHeight)

  // if (W_H_RATIO < windowRatio) {
  //   __canvas = createCanvas(window.innerHeight * W_H_RATIO, window.innerHeight)
  //   SCALE = window.innerHeight/H

  // } else if (W_H_RATIO > windowRatio) {
  //   __canvas = createCanvas(window.innerWidth, window.innerWidth /W_H_RATIO)
  //   SCALE = window.innerWidth/W

  // } else {
  //   __canvas = createCanvas(window.innerWidth, window.innerHeight)
  //   SCALE = window.innerWidth/W
  // }

  SIZE = min(window.innerWidth, window.innerHeight)
  __canvas = createCanvas(SIZE, SIZE)
  noiseSeed(int(rnd(10000000000000000)))
  colorMode(HSB, 360, 100, 100, 100)

  SCALE = rnd(0.2, 1.2)
  SCALE_ADJ = SIZE/800
  const sizeADJ = SCALE*SCALE_ADJ

  W = width/sizeADJ
  H = height/sizeADJ
  L = -width/(2*sizeADJ)
  R = width/(2*sizeADJ)
  T = -height/(2*sizeADJ)
  B = height/(2*sizeADJ)

  // chaos budget
    // turbulence
    // street turbulence
    // zoom
    // hard curves
    // noise divisor
    // # layers


  TURBULENCE = rnd() < 0.15
  STREET_TURBULENCE = rnd() < 0.1
  IGNORE_STREET_CAP = rnd() < 0.1
  HARD_CURVES = rnd() < 0.05
  STRAIGHT_STREETS = rnd() < 0.05
  KINKED_STREET_FACTOR =
    rnd() < 0.15
      ? random(QUARTER_PI/2, QUARTER_PI) * posOrNeg()
      : 0


  SECONDARY_ANGLE_ADJ = chance(
    [1, 0],
    [STRAIGHT_STREETS ? 0 : 0.15, HALF_PI/3],
  )

  NOISE_DIVISOR = rnd(150, 750) / SCALE

  DENSITY = chance(
    [SCALE >= 0.8 ? 0.0025 : 0.01, 0],
    [0.97, 1],
    [0.02, 2],
  )

  DOUBLE_STREETS = DENSITY === 1 && !HARD_CURVES && rnd() < 0.01

  console.log(DENSITY, SCALE)

  COLOR_RULE = chance(
    [30, 0], // anything goes
    [37, 1], // high contrast
    [5, 2], // all light
    [5, 3], // all dark
    [20, 4], // all color
    [3, 5], // topographic
  )

  let layerN = chance(
    [SCALE > 1 ? 1 : 5, 1],
    [8, 2], // todo don't include if all light?
    [37, 3],
    [35, 4],
    [10, 8], // more likely if alternate
    [4, 12], // more likely if alternate
    [1, 30], // more likely if alternate
  )


  let thresholdAdj = 1
  if (layerN === 30) {
    thresholdAdj = 0.01
  }


  let baseRule = chance(
    [layerN <= 4 ? 25 : 0, 'paper'],
    [layerN <= 4 ? 25 : 0, 'burnt'],
    [layerN <= 4 ? 25 : 0, 'faded'],

    [layerN <= 4 ? 10 : 5, 'bright'],
    [5, 'whiteAndBlack'],
    [5, 'blackAndWhite'],
    [SCALE <= 0.3 ? 0 : 5, 'neon'],
  )

  let hueDiff = chance(
    [1, 0],
    [2, 20],
    [1, 100],
    [3, 120],
    [1, 150],
    [2, 180],
  ) * posOrNeg()


  let forceGradients = rnd() < 0.02
  let invertStreets = false
  let lightenDarks = false

  if (COLOR_RULE === 3) {
    baseRule = chance(
      [20, 'burnt'],
      [5, 'blackAndWhite'],
      [5, 'neon'],
    )

    TURBULENCE = rnd() < 0.4
    STREET_TURBULENCE = rnd() < 0.3
    lightenDarks = true


  } else if (COLOR_RULE === 4) {

    baseRule = chance(
      [10, 'faded'],
      [30, 'bright'],
      [10, 'paper'],
      [30, 'whiteAndBlack'],
    )

    layerN = chance(
      [25, 3],
      [35, rndint(4,6)],
      [25, rndint(6,9)],
      [10, rndint(9, 15)],
      [5, rndint(15, 30)],
    )

    hueDiff = chance(
      [layerN >= 12 ? 2 : 1, 10],
      [4, 20],
      [layerN >= 12 ? 1 : 2, 100],
      [3, 120],
      [layerN >= 12 ? 1 : 3, 150],
      [3, 180],
    ) * posOrNeg()

    if (rnd() < 0.05) {
      forceGradients = true
      invertStreets = true
    } else {
      invertStreets = 0.5
    }

  } else if (5 === COLOR_RULE) {
    thresholdAdj = 0.01

    NOISE_DIVISOR = rnd(350, 1000) / SCALE


    layerN = 50

    baseRule = chance(
      [25, 'paper'],
      [25, 'faded'],
      [25, 'bright'],
      [10, 'whiteAndBlack'],
    )


    hueDiff = chance(
      [4, 0],
      [1, 120],
      [1, 180],
    ) * posOrNeg()

  // } else if (COLOR_RULE === 6) {
  //   baseRule = 'blackAndWhite'
  //   forceGradients = true
  //   layerN = chance(
  //     [25, 3],
  //     [35, rndint(4,6)],
  //     [25, rndint(6,9)],
  //     [10, rndint(9, 15)],
  //     [5, rndint(15, 30)],
  //   )
  }

  console.log(layerN, NOISE_DIVISOR*SCALE)


  console.log(COLOR_RULE)
  console.log(hueDiff)

  LAYERS = setLayers(layerN, baseRule, hueDiff, thresholdAdj, lightenDarks, forceGradients, invertStreets)
}


function draw() {

  noLoop()

  translate(width/2, height/2)
  scale(SCALE * SCALE_ADJ)


  const START = Date.now()

  drawBackground()
  drawStreetGrid(0,0)

  if (DOUBLE_STREETS) drawStreetGrid(0,0)


  // translate(5, 5)
  // drawStreetGrid()

  console.log(Date.now() - START)
}